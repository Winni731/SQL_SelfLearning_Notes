SQL (Declarative, Data independent)
- Say "what to do"
- Database engine figures out best way to execute query
- decoupled from underlying data organization
- SQL is standard and identical among vendors

Query Syntax
- SELECT <desired attributes>
- FROM <one or more tables>
- WHERE <predicate holds for selected tuple>
- GROUP BY <key columns, aggregations>
- HAVING <predicate holds for selected group>
- ORDER BY < columns to sort>

Other aspects of SQL
- Data Definition Language ("DDL")
- Data Manipulation Language ("DML")
- "Active" Logic

'SELECT' clause
- Identifies which attribute(s) query returns
          - Comma-separated list
          - determines schema of query result
- extended projection, rename attributes, specify groupings, duplicate elimination

Examples of 'SELECT' clause
- SELECT E.name;                      --> Explicit attribute
- SELECT name;                        --> implicit attribute
- SELECT E.name AS 'Employee name';   --> Prettified for output
- SELECT sum(S.value);                --> Grouping/compute sum
- SELECT sum(S.value)*0.13 'HST';     --> Scalar expression based on aggregate
- SELECT *;                           --> Select all
- SELECT E.*;                         --> Select all attributes from E

'FROM' clause
- identifies the tables/relations to query
          - comma-separated list
- specify joins, rename table/"tuple variable"

Examples of 'FROM' clause
- FROM Employees                      --> Explicit relation
- FROM Employees AS E                 --> Table alias
- FROM Employees, Sales               --> Cartesian product
- FROM Employees E JOIN Sales S       --> Cartesian product (no joinn condition given)
- FROM Employees E JOIN Sales S ON E.EID=S.EID          --> (Equi-join)
- FROM Employees NATURAL JOIN Sales                     --> (Natural join)
- FROM Employees E
           LEFT JOIN Sales S ON E>EID=S.EID             --> (Left join)
- FROM Employees E1
           JOIN Employees E2 ON E1.EID < E2.EID         --> (Theta self-join)
           
 ** WHERE operates on pre-joined tuples
 ** - if T=null,  then R x S x T = R x S x null = null
 ** - WHERE R.x=S.x OR R.x=T.x will result No Tuples for WHERE to work with
 
Explicit join ordering
- use parenthese to group joins
- special-purpose feature
      - helps some systems optimize better
      - helps align schemas for natural join
- recommendation: avoid

'WHERE' clause
- conditions which all returned tuples must meet arbitrary boolean expression, combine multiple expressions with AND/OR/NOT
- Attention to data of interest: Specific people, dates, places, quantities; things which do (or do not) correlate with other data
- Often used instead of JOIN
              - FROM tables (Cartesian product)
              - Specify join condition in WHERE clause
              - Optimizers understand and do the right thing
              
Scalar expressions in SQL
- Literals, attributes, single-valued relations
- Boolean expressions: T/F -> 1/0, Zero/non-zero -> F/T
- Logical connectors: AND, OR, NOT
- Conditionals: =  !=  <  >  <=  >=  <>  BETWEEN, [NOT]LIKE, IS [NOT] NULL
- Operators: +  -  *  /  %  &  |  ^
- Functions: math, string, data/time, etc

Pattern matching
- Compare a string to a pattern: <attribute> LIKE <pattern>, <attribute> NOT LIKE <pattern>
- Pattern is a quoted string: % => any string,  _ => any character
- To escape '%' or '_': LIKE '%x_%' ESCAPE 'x' (replace 'x' with character of choice) => 
                        matches strings containing '_'



